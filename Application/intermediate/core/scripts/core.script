global create_core = function(id)
{
    local core = 
    {
        self = id,
    };

    core.start = function()
    {
        print("game core start.");
        .shading_env = resource.find_resource(string_to_id("shading_enviroment"), string_to_id("core/common/default"));
        world.set_shading_enviroment(.shading_env);

        package_name = "data/world0.package";
        global g_package_loading = string_to_id(package_name);
        resource.load_package(package_name);

        physics.create_world(string_to_id("core/global"));
        physics.create_plane(500);

        graphics.camera_set_position(0, 10, -10);
        graphics.camera_set_lookat(0, 0, 0);

        this:stateSet(.splash_state);
    };

    core.stop = function()
    {
        print("game core stop.");
    };

    core.fade_in = function(time)
    {
        local dt = 1.0/60.0;
        local alpha = 255.0;
        local fade_speed = 255.0/time;

        while(true)
        {
            local w = get_window_width(); 
            local h = get_window_height(); 

            gui.draw_rect(0, 0, w, h, rgba_to_int(0,0,0,alpha));
            alpha -= dt * fade_speed;
            if(alpha <= 0.0)
            {
                return;
            }
            yield();
        }
    };

    core.fade_out = function(time)
    {
        local dt = 1.0/60.0;
        local alpha = 0.0;
        local fade_speed = 255.0/time;

        while(true)
        {
            local w = get_window_width(); 
            local h = get_window_height(); 

            gui.draw_rect(0, 0, w, h, rgba_to_int(0,0,0,alpha));
            alpha += dt * fade_speed;
            if(alpha >= 255.0)
            {
                return;
            }
            yield();
        }
    };

    core.splash_state = function()
    {
        print("enter ---------------> splash state ");

        while( true )
        {
            local w = get_window_width(); 
            local h = get_window_height();  
            gui.draw_rect(0, 0, w, h, rgba_to_int(0,0,0));
            gui.draw_text(w/2, h/2, gui.TEXT_ALGIN_LEFT, "Loading core.package", rgba_to_int(255,255,0));

            local status = resource.get_package_status(g_package_loading);
            print("status = " + status);

            if(status == resource.OFFLINE)
            {
                resource.flush_package(g_package_loading, 99999);
            }
            else if(status == resource.ONLINE)
            {
                this:stateSet(.loaded_state);
            }
            yield();
        }
    };

    core.loaded_state = function()
    {
        print("enter ---------------> loaded state ");

        world.load_level(string_to_id("world0/Level_Test"));

        local w = get_window_width();
        local h = get_window_height();  
        local debug_index = 0;
        
        .fade_in(1.5);

        local bShowProfile = false;
        local bShowShadingEnv = false;
        .scroll = 0.0;

        while(true)
        {
            if(input.is_key_just_pressed(input.F1))
            {
                graphics.set_debug_mode(debug_index);
                debug_index += 1;
                if(debug_index > 4)
                {
                    debug_index = 0;
                }
            }
            else if(input.is_key_just_pressed(input.ESC))
            {
                shut_down();
            }
            else if(input.is_key_just_pressed(input.F2))
            {
                bShowProfile = !bShowProfile;
            }
            else if(input.is_key_just_pressed(input.F3))
            {
                bShowShadingEnv = !bShowShadingEnv;
            }

            graphics.update_debug_camera();
            graphics.debug_add_axis(0,0,0,0,0,0,10);
            graphics.debug_draw_models();
            graphics.debug_draw_lights();
            if(bShowShadingEnv)
            {
                debug.debug_shading_enviroment(0, 0, 400, 500, "core/common/default");
            }
            

            if(bShowProfile)
            {
                show_profile();
            }

            yield();
        }  
    };

    print("core ver 1!");

    return core;
};